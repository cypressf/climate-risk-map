{"version":3,"sources":["DataTypes.ts","Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["dataTypes","GDP2018","name","units","formatter","value","Intl","NumberFormat","undefined","style","currency","maximumFractionDigits","minimumFractionDigits","format","color","scales","scale","AWATER","tooltip","select","append","attr","handleMouseOut","d","this","transition","duration","getColor","selection","length","scaleThreshold","domain","range","Map","data","svgRef","useRef","useEffect","svg","current","countyGeoJson","feature","objects","counties","selectAll","features","join","properties","geoPath","on","this_county","NAME","html","event","pageX","pageY","handleMouseOverCreator","ref","viewBox","id","App","useState","setState","json","process","then","Fragment","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b6ea3531.chunk.js","sourcesContent":["import * as scales from 'd3-scale-chromatic';\n\ntype Data = {\n    name: string,\n    units: string,\n    formatter: (value: number) => string,\n    color: ReadonlyArray<ReadonlyArray<string>>,\n    scale: number[]\n}\n\nconst dataTypes: { [key: string]: Data } = {\n    GDP2018: {\n        name: \"GDP 2018\",\n        units: \"USD\",\n        formatter: value => new Intl.NumberFormat(\n            undefined,\n            {\n                style: 'currency',\n                currency: 'USD',\n                maximumFractionDigits: 0,\n                minimumFractionDigits: 0\n            }\n        ).format(value),\n        color: scales.schemeGreens,\n        scale: [0, 1000000, 2000000, 3000000, 10000000, 100000000, 300000000, 700000000]\n    },\n    AWATER: {\n        name: \"Water Area\",\n        units: \"square miles\",\n        formatter: value => value + \" sq miles\",\n        color: scales.schemeBlues,\n        scale: [0, 1000000, 2000000, 3000000, 10000000, 100000000, 300000000, 700000000]\n    }\n};\n\nexport default dataTypes;","import React, { useRef, useEffect } from 'react';\nimport { select, geoPath, scaleThreshold, event} from 'd3';\nimport { feature } from 'topojson-client';\nimport { Objects, Topology, GeometryCollection } from 'topojson-specification';\nimport { GeoJsonProperties } from 'geojson';\nimport dataTypes from './DataTypes';\n\nconst tooltip = select(\"body\")\n    .append(\"div\")\n    .attr(\"class\", \"tooltip\")\n    .style(\"opacity\", 0)\n    .style(\"position\", \"absolute\")\n    .style(\"font-size\", \"0.7em\")\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-weight\", 600)\n    .style(\"padding\", \"4px\")\n    .style(\"background\", \"white\")\t\n    .style(\"pointer-events\", \"none\");\n\nconst handleMouseOverCreator = (selection: string) => {\n    return function(this: any, d: any) {\n        select(this)\n            .style(\"opacity\", 0.5)\n            .style(\"stroke\", \"black\")\n            .style(\"stroke-width\", 0.5)\n    \n        tooltip.transition()\n            .duration(200)\n            .style(\"opacity\", .9)\n        \n        let value = 0\n        let name = \"---\"\n    \n        let this_county = d.properties[selection]\n        if (this_county) {\n            value = this_county;\n            name = d.properties.NAME\n        }\n    \n        tooltip.html(`${name}: ${dataTypes[selection].formatter(value)}`)\t\n            .style(\"left\", `${event.pageX + 20}px`)\t\t\n            .style(\"top\", (event.pageY - 45) + \"px\");\n    }\n};\n\nconst handleMouseOut = function(this:any, d:any) {\n    select(this)\n        .style(\"opacity\", 1)\n        .style(\"stroke\", null)\n\n    tooltip.transition()\t\t\n        .duration(200)\t\t\n        .style(\"opacity\", 0)\n}\n\nconst getColor = (selection: string) => {\n    const scale = dataTypes[selection].scale;\n    const color = dataTypes[selection].color[scale.length];\n    return scaleThreshold<number, string>()\n        .domain(scale)\n        .range(color);\n}\n\nconst Map = ({data, selection}: {data: Topology<Objects<GeoJsonProperties>> | undefined, selection: string}) => {\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    useEffect(() => {\n        const svg = select(svgRef.current);\n\n        if (data === undefined) {\n            return;\n        }\n        const countyGeoJson = feature(\n            data,\n            data.objects.counties as GeometryCollection<GeoJsonProperties>\n        )\n        svg\n            .select(\"#map\")\n            .selectAll(\"path\")\n            .data(countyGeoJson.features)\n            .join(\"path\")\n            .attr(\"class\", \"county\")\n            .attr(\"fill\", d => {\n                if (d.properties) {\n                    return getColor(selection)(d.properties[selection]);\n                } else {\n                    return getColor(selection)(0);\n                }\n            })\n            .attr(\"d\", geoPath());\n        svg\n            .selectAll(\".county\")\n            .on(\"touchmove mousemove\", handleMouseOverCreator(selection))\n            .on(\"touchend mouseleave\", handleMouseOut);\n    }, [data, selection])\n\n    return (\n        <svg ref={svgRef} viewBox=\"0, 0, 975, 610\">\n            <g id=\"map\"></g>\n        </svg>\n    );\n}\n\nexport default Map;","import React, { useEffect, useState, ChangeEvent } from 'react';\nimport Map from './Map';\nimport { Objects, Topology } from 'topojson-specification';\nimport { GeoJsonProperties } from 'geojson';\nimport './App.css';\nimport { json } from 'd3-fetch';\n\ntype AppState = {\n  data: Topology<Objects<GeoJsonProperties>> | undefined,\n  selection: string\n};\n\nconst App = () => {\n  const [{data, selection}, setState] = useState<AppState>({data: undefined, selection: \"AWATER\"});\n  useEffect(() => {\n    json<Topology<Objects<GeoJsonProperties>>>(process.env.PUBLIC_URL + \"/usa-topo.json\").then(d => setState({data: d, selection: selection}));\n  }, []);\n\n  const changeSelection = (event: ChangeEvent<HTMLSelectElement>) => {\n    setState({data: data, selection:  event.target.value});\n  }\n\n  return (\n    <React.Fragment>\n      <h1>Climate Risk Map</h1>\n      <select value={selection} onChange={changeSelection}>\n        <option value=\"AWATER\">Water Area</option>\n        <option value=\"GDP2018\">GDP 2018 (USD)</option>\n      </select>\n      <Map data={data} selection={selection}/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}