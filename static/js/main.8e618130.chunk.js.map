{"version":3,"sources":["Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["tooltip","select","append","attr","style","handleMouseOver","d","this","transition","duration","value","name","this_county","properties","GDP2018","NAME","html","Intl","NumberFormat","undefined","currency","format","event","pageX","pageY","handleMouseOut","getColor","scaleThreshold","domain","range","schemeBlues","Map","data","svgRef","useRef","useEffect","svg","current","countyGeoJson","feature","objects","counties","selectAll","features","join","geoPath","on","ref","App","useState","setData","json","process","then","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAMMA,EAAUC,YAAO,QAClBC,OAAO,OACPC,KAAK,QAAS,WACdC,MAAM,UAAW,GACjBA,MAAM,WAAY,YAClBA,MAAM,YAAa,SACnBA,MAAM,cAAe,cACrBA,MAAM,cAAe,KACrBA,MAAM,UAAW,OACjBA,MAAM,aAAc,SACpBA,MAAM,iBAAkB,QAEvBC,EAAkB,SAAoBC,GACxCL,YAAOM,MACFH,MAAM,UAAW,IACjBA,MAAM,SAAU,SAChBA,MAAM,eAAgB,IAE3BJ,EAAQQ,aACHC,SAAS,KACTL,MAAM,UAAW,IAEtB,IAAIM,EAAQ,EACRC,EAAO,MAEPC,EAAcN,EAAEO,WAAWC,QAC3BF,IACAF,EAAQE,EACRD,EAAOL,EAAEO,WAAWE,MAGxBf,EAAQgB,KAAR,UAAgBL,EAAhB,aAAyB,IAAIM,KAAKC,kBAAaC,EAAW,CAAEf,MAAO,WAAYgB,SAAU,QAASC,OAAOX,KACpGN,MAAM,OADX,UACsBkB,IAAMC,MAAQ,GADpC,OAEKnB,MAAM,MAAQkB,IAAME,MAAQ,GAAM,OAGrCC,EAAiB,SAAmBnB,GACtCL,YAAOM,MACFH,MAAM,UAAW,GACjBA,MAAM,SAAU,MAErBJ,EAAQQ,aACHC,SAAS,KACTL,MAAM,UAAW,IAGpBsB,EAAWC,cACZC,OAAO,CAAC,EAAG,IAAS,IAAS,IAAS,IAAU,IAAW,IAAW,MACtEC,MAAMC,IAAY,IA4CRC,EA1CH,SAAC,GAAsE,IAArEC,EAAoE,EAApEA,KACJC,EAASC,iBAAsB,MAiCrC,OA/BAC,qBAAU,WACN,IAAMC,EAAMnC,YAAOgC,EAAOI,SAE1B,QAAalB,IAATa,EAAJ,CAGA,IAAMM,EAAgBC,YAClBP,EACAA,EAAKQ,QAAQC,UAEjBL,EAAIjC,KAAK,UAAW,kBACfD,OAAO,KACPC,KAAK,KAAM,OACXuC,UAAU,QACVV,KAAKM,EAAcK,UACnBC,KAAK,QACLzC,KAAK,QAAS,UACdA,KAAK,QAAQ,SAAAG,GACV,OAAIA,EAAEO,WACKa,EAASpB,EAAEO,WAAF,SAETa,EAAS,MAGvBvB,KAAK,IAAK0C,eACfT,EACKM,UAAU,WACVI,GAAG,sBAAuBzC,GAC1ByC,GAAG,sBAAuBrB,MAChC,CAACO,IAGA,6BACI,8CACA,yBAAKe,IAAKd,M,kBCzEPe,MAbf,WAAgB,IAAD,EACWC,qBADX,mBACNjB,EADM,KACAkB,EADA,KAKb,OAHAf,qBAAU,WACRgB,YAA2CC,mCAA2CC,KAAKH,KAC1F,IAED,kBAAC,IAAMI,SAAP,KACE,gDACA,kBAAC,EAAD,CAAKtB,KAAMA,MCHGuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e618130.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { select, geoPath, scaleThreshold, schemeBlues, event} from 'd3';\nimport { feature } from 'topojson-client';\nimport { Objects, Topology, GeometryCollection } from 'topojson-specification';\nimport { GeoJsonProperties } from 'geojson';\n\nconst tooltip = select(\"body\")\n    .append(\"div\")\n    .attr(\"class\", \"tooltip\")\n    .style(\"opacity\", 0)\n    .style(\"position\", \"absolute\")\n    .style(\"font-size\", \"0.7em\")\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-weight\", 600)\n    .style(\"padding\", \"4px\")\n    .style(\"background\", \"white\")\t\n    .style(\"pointer-events\", \"none\");\n\nconst handleMouseOver = function(this: any, d: any) {\n    select(this)\n        .style(\"opacity\", 0.5)\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", 0.5)\n\n    tooltip.transition()\n        .duration(200)\n        .style(\"opacity\", .9)\n    \n    let value = 0\n    let name = \"---\"\n\n    let this_county = d.properties.GDP2018\n    if (this_county) {\n        value = this_county;\n        name = d.properties.NAME\n    }\n\n    tooltip.html(`${name}: ${new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' }).format(value)}`)\t\n        .style(\"left\", `${event.pageX + 20}px`)\t\t\n        .style(\"top\", (event.pageY - 45) + \"px\");\n}\n\nconst handleMouseOut = function(this:any, d:any) {\n    select(this)\n        .style(\"opacity\", 1)\n        .style(\"stroke\", null)\n\n    tooltip.transition()\t\t\n        .duration(200)\t\t\n        .style(\"opacity\", 0)\n}\n\nconst getColor = scaleThreshold<number, string>()\n    .domain([0, 1000000, 2000000, 3000000, 10000000, 100000000, 300000000, 700000000])\n    .range(schemeBlues[9]);\n\nconst Map = ({data}: {data: Topology<Objects<GeoJsonProperties>> | undefined}) => {\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    useEffect(() => {\n        const svg = select(svgRef.current);\n\n        if (data === undefined) {\n            return;\n        }\n        const countyGeoJson = feature(\n            data,\n            data.objects.counties as GeometryCollection<GeoJsonProperties>\n        )\n        svg.attr(\"viewBox\", \"0, 0, 975, 610\")\n            .append(\"g\")\n            .attr(\"id\", \"map\")\n            .selectAll(\"path\")\n            .data(countyGeoJson.features)\n            .join(\"path\")\n            .attr(\"class\", \"county\")\n            .attr(\"fill\", d => {\n                if (d.properties) {\n                    return getColor(d.properties[\"GDP2018\"]);\n                } else {\n                    return getColor(0);\n                }\n            })\n            .attr(\"d\", geoPath());\n        svg\n            .selectAll(\".county\")\n            .on(\"touchmove mousemove\", handleMouseOver)\n            .on(\"touchend mouseleave\", handleMouseOut);\n    }, [data])\n\n    return (\n        <div>\n            <h2>GDP 2018 (USD)</h2>\n            <svg ref={svgRef}></svg>\n        </div>\n    );\n}\n\nexport default Map;","import React, { useEffect, useState } from 'react';\nimport Map from './Map';\nimport { Objects, Topology } from 'topojson-specification';\nimport { GeoJsonProperties } from 'geojson';\nimport './App.css';\nimport { json } from 'd3-fetch';\n\nfunction App() {\n  const [data, setData] = useState<Topology<Objects<GeoJsonProperties>>>();\n  useEffect(() => {\n    json<Topology<Objects<GeoJsonProperties>>>(process.env.PUBLIC_URL + \"/usa-topo.json\").then(setData);\n  }, []);\n  return (\n    <React.Fragment>\n      <h1>Climate Risk Map</h1>\n      <Map data={data}/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}